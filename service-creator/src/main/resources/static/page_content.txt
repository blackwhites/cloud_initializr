
<p style="font-size: medium;">You think <a href="http://projects.spring.io/spring-cloud/">Spring Cloud</a> is a great and useful piece of software? You think configuring a running project is error prone and sometimes really annoying? We too. So we build this little tool, that generates a running microservice, cloud or what ever you want to call it, infrastructure for you.</p> 

<p><b>1. STEP:</b> Fill out the form below. Give a name (this will be the name of the base folder) and a base path (Maven group id) to your application. Then add some services simply typing a name and hitting enter (of course you can use the button, too). If you have enough services finally hit "BUILD YOUR CLOUD NOW". A bunch of little gears start running, building a personal cloud infrastructure for you. Save the zip file and unpack it. Then goto step 2.</p>

<p><b>2. STEP:</b> Open a console and navigate to your unzipped domain folder. We call it "CLOUD_HOME". We assume, that you have Maven 3.x running on your box (if not <a href="https://maven.apache.org/install.html">install</a> it now). Ok - back to CLOUD_HOME. If you type 'ls -l' you shoud see a lot of folders and a file called 'pom.xml'. That's for building your cloud. Type 'mvn clean package' - the rest does maven for you. If maven finished its work successfully goto step 3.</p>

<p><3. STEP:</b> Now we want to start our infrastructure. Of course you can do this by hand (java -jar nameofthejar.jar), but it's much easier using docker. So we assume, that you have installed <i>Docker</i> >1.10 and <i>docker compose</i> >1.6 (if not install <a href="https://docs.docker.com/engine/installation/">docker</a> and <a href="https://docs.docker.com/compose/install/">docker compose</a> now). Switch to CLOUD_HOME/docker. There you can find a file called 'docker-compose.yml'. This describes your server infrastructure. Ok - let's go. Type 'docker-compose up' (use 'docker-compose up -d' if you want to start the containers in detached mode. Then you can see the logs by typing 'docker-compose logs'.) and wait. On startup there can be some errors, because nodes are trying to contact nodes that are not up yet. If the literals are running slower over your screen, you can go to step 4.</p> 

<p><b>4. STEP:</b> The infrastructure is (hopefully) up and running. If you'll open a new console and type 'docker ps' you will see your running containers. The <i>registry</i> container has been mapped to port <i>8671</i>. Simply goto <a href="http://localhost:8761/">http://localhost:8761</a>. You should see the <i>Eureka</i> dashboard with your registered services. If you take a look to your 'docker ps' there is a second container called <i>proxy</i> which has been mapped to port <i>80</i>. The proxy is the gateway to our services. If you have a service called <i>service-a</i> then you can get a hello from <a href="http://localhost/servicea/hello_servicea">http://localhost/servicea/hello_servicea</a>. Your service name minus all '-', '_', '.' and ' ' will be used like this: <i>http://localhost/[CLEAN_SERVICENAME]/hello_[CLEAN_SERVICENAME]</i>.</p>   

<p><b>5. AND FINAL STEP:</b> Talk with us, talk about us. If you found this little tool useful, tell your friends, share the link, talk about it. If you have ideas for improvements, or you've found a bug - open an issue on <a href="https://github.com/xdoo/create-your-cloud">github</a>. Stay tuned and follow us on <a href="https://plus.google.com/u/0/communities/110712700809606801078>Google+</a> and / or <a href="https://twitter.com/clausstraube">Twitter</a>. We love to hear from you :)</p> 
